// _____ _____ _____  _                       
// |  __ \_   _|  __ \| |                      
// | |__) || | | |  | | |     ___   ___  _ __  
// |  ___/ | | | |  | | |    / _ \ / _ \|  _ \
// | |    _| |_| |__| | |___| (_) | (_) | |_) |
// |_|   |_____|_____/|______\___/ \___/| .__/ 
// https://git.psi.ch/hipa_apps/pidloop |_|    
//                                      
// This calss can read .reg files and convert the
// xml data inside of them to a Config struct instance.
// It can read every .reg configuration generated by it or
// the previous version of this program reg2d. But this 
// program changes the format of the files so they are no
// longer backwards compatible.
// This class uses the one-file library tinyxml2 from the file
// src/logic/xml_parser.h
//
// @Author: Adam Koprek
// @Maintainer: Jochem Snuverink

#include <cmath>
#include <iomanip>
#include <iostream>
#include <sstream>
#include <string>

#include "config_parser.h"
#include "config.h"
#include "device.h"
#include "xml_parser.h"


// Internal helper functions
namespace  {

    // Convert a double to a char* text with a precision of 6
    const char* number_to_string(double input) {
        std::ostringstream strs;
        strs << std::fixed << std::setprecision(6) << input; 
        static std::string standart_string = "";
        standart_string = strs.str();
        return standart_string.c_str();
    }
}

/************************************************************
*                       public
************************************************************/

// Constructor
ConfigParser::ConfigParser() {}

// Deconstructor
ConfigParser::~ConfigParser() {
    delete m_file;
}

// Load config from file
int ConfigParser::load_config(std::string file_path) {
    delete m_file;
    m_file = new tinyxml2::XMLDocument();
    m_file->LoadFile(file_path.c_str());
    return m_file->ErrorID();
}

// Save config to a given path
int ConfigParser::save_config(std::string file_path) {
    return m_file->SaveFile(file_path.c_str());
}

// Parse loaded config into a Config struct
int ConfigParser::parse_config(Config* config) {
    tinyxml2::XMLElement* root_wrapper = m_file->FirstChildElement("pidControl");
    if (root_wrapper == nullptr) {
        root_wrapper = m_file->FirstChildElement("PIDLoop");
        if (root_wrapper == nullptr) return -1;
    }
    
    tinyxml2::XMLElement* information_wrapper = root_wrapper->FirstChildElement("Control");

    int query_error = 0;
    const char* name_buffer;

    Device activ_device;
    tinyxml2::XMLElement* xml_activ_device = information_wrapper->FirstChildElement("Activ"); 
    if (xml_activ_device == nullptr) return -2;
    query_error += xml_activ_device->QueryStringAttribute("device", &name_buffer);
    activ_device.name = std::string(name_buffer);
    query_error += xml_activ_device->QueryDoubleAttribute("max", &activ_device.max); 
    query_error += xml_activ_device->QueryDoubleAttribute("min", &activ_device.min); 
    query_error += xml_activ_device->QueryDoubleAttribute("holdvalue", &activ_device.hold_value); 
    if (query_error != 0) return -2;
    config->activ = activ_device;

    Device passiv_device;
    tinyxml2::XMLElement* xml_passiv_device = information_wrapper->FirstChildElement("Passiv"); 
    if (xml_passiv_device == nullptr) return -3;
    name_buffer = nullptr;
    query_error += xml_passiv_device->QueryStringAttribute("device", &name_buffer);
    passiv_device.name = std::string(name_buffer);
    query_error += xml_passiv_device->QueryDoubleAttribute("sol", &passiv_device.setpoint); 
    query_error += xml_passiv_device->QueryDoubleAttribute("max", &passiv_device.max); 
    query_error += xml_passiv_device->QueryDoubleAttribute("min", &passiv_device.min); 
    int code =     xml_passiv_device->QueryStringAttribute("extern", &name_buffer);
    if (code == 0) config->extern_setpoint = std::string(name_buffer);
    else           config->extern_setpoint = "";
    if (query_error != 0) return -3;
    config->passiv = passiv_device;

    tinyxml2::XMLElement* xml_pid_params = information_wrapper->FirstChildElement("Pid");
    if (xml_pid_params == nullptr) return -4;
    query_error += xml_pid_params->QueryInt64Attribute("gainlow", &config->gain_below_boundary);
    query_error += xml_pid_params->QueryInt64Attribute("gainhigh", &config->gain_above_boundary);
    query_error += xml_pid_params->QueryDoubleAttribute("gainboundary", &config->gain_boundary);
    query_error += xml_pid_params->QueryInt64Attribute("rate", &config->rate);
    query_error += xml_pid_params->QueryDoubleAttribute("integral", &config->i_param);
    query_error += xml_pid_params->QueryDoubleAttribute("differential", &config->d_param);
    if (query_error != 0) return -4;

    tinyxml2::XMLElement* xml_matrix = information_wrapper->FirstChildElement("Matrix");
    if (xml_matrix == nullptr) {
        // New version
        tinyxml2::XMLElement* xml_params = information_wrapper->FirstChildElement("Params");
        if (xml_params == nullptr) return -5;
        query_error += xml_params->QueryDoubleAttribute("coefficient", &config->coefficient);
        query_error += xml_params->QueryBoolAttribute("dynamicgain", &config->dynamic_gain);
        if (query_error != 0) return -6;
    }

    else {
        // Old version
        query_error += xml_matrix->QueryDoubleAttribute("mat1", &config->coefficient);
        if (query_error != 0) return -7;
    }

    tinyxml2::XMLElement* xml_condition_device = information_wrapper->FirstChildElement("Condition");
    while (xml_condition_device != nullptr) {
        Device condition_device;
        query_error += xml_condition_device->QueryStringAttribute("device", &name_buffer);
        condition_device.name = std::string(name_buffer);
        query_error += xml_condition_device->QueryDoubleAttribute("high", &condition_device.max); 
        query_error += xml_condition_device->QueryDoubleAttribute("low", &condition_device.min); 
        if (query_error != 0) return -8;
        config->condition_devices.push_back(condition_device);

        xml_condition_device = xml_condition_device->NextSiblingElement("Condition");
    }

    return 0;
}

// Dump infirmation from a Config* instance in the new format (but still xml)
void ConfigParser::dump(Config* config) {
    delete m_file;

    m_file = new tinyxml2::XMLDocument(); 
    m_file->InsertFirstChild(m_file->NewDeclaration());

    auto root = m_file->NewElement("PIDLoop");
    m_file->InsertEndChild(root);
    auto wrapper = m_file->NewElement("Control");
    root->InsertFirstChild(wrapper);

    auto activ_device = m_file->NewElement("Activ");
    activ_device->SetAttribute("device",    config->activ.name.c_str());
    activ_device->SetAttribute("max",       number_to_string(config->activ.max));
    activ_device->SetAttribute("min",       number_to_string(config->activ.min));
    activ_device->SetAttribute("holdvalue", number_to_string(config->activ.hold_value));
    wrapper->InsertEndChild(activ_device);

    auto passiv_device = m_file->NewElement("Passiv");
    passiv_device->SetAttribute("device",   config->passiv.name.c_str());
    passiv_device->SetAttribute("sol",      number_to_string(config->activ.setpoint));
    passiv_device->SetAttribute("max",      number_to_string(config->passiv.max));
    passiv_device->SetAttribute("min",      number_to_string(config->passiv.min));
    if (config->extern_setpoint != "") 
        passiv_device->SetAttribute("extern", config->extern_setpoint.c_str());
    wrapper->InsertEndChild(passiv_device);

    auto pid = m_file->NewElement("Pid");
    pid->SetAttribute("gainlow",            number_to_string(config->gain_below_boundary));
    pid->SetAttribute("gainhigh",           number_to_string(config->gain_above_boundary));
    pid->SetAttribute("gainboundary",       number_to_string(config->gain_boundary));
    pid->SetAttribute("rate",               number_to_string(config->rate));
    pid->SetAttribute("integral",           number_to_string(config->i_param));
    pid->SetAttribute("differential",       number_to_string(config->d_param));
    wrapper->InsertEndChild(pid);

    auto params = m_file->NewElement("Params");
    params->SetAttribute("coefficient",     number_to_string(config->coefficient));
    params->SetAttribute("dynamicgain",     config->dynamic_gain);
    wrapper->InsertEndChild(params);

    for (int i = 0; i < config->condition_devices.size(); i++) {
        auto device = m_file->NewElement("Condition");
        device->SetAttribute("device",      config->condition_devices[i].name.c_str());
        device->SetAttribute("high",        number_to_string(config->condition_devices[i].max));
        device->SetAttribute("low",         number_to_string(config->condition_devices[i].min));
        wrapper->InsertEndChild(device);
    }
}
